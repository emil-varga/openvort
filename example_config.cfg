#comments start with the hash #
#configuration file is processed in configuration.c
#see there for complete list of options

#use this file to start the simulation with
#vortices -c <path to config file> -o <directory to save the frames>

#libconfig is used to to parse this file, which has trouble
#telling apart floats and ints
#so for floating point parameter you have to write the value
#as a float even if the value is integer, i.e.
#float_parameter = 1.0
#and NOT
#float_parameter = 1

#the computational domain, mainly used for periodic boundary conditions
#two points -- back-left-bottom (x-y-z) front-right-top, dimensions in cm
domain = ([-0.05, -0.05, 0.0], [0.05, 0.05, 0.3]);
#back->front -- increasing x
#left->right -- increasing y
#bottom->top -- increasing z

#what to do at the boundaries (i.e., wall or periodic)
#and how many image tangles to use (for periodic)
#see tangle.h (struct image_tangle) and boundary_imagies.c
#for complete list of options
boundaries = "wall-1-6";

use_mutual_friction = True;
alpha = 0.481; #the first mutual friction parameter 
alpha_p = -2.412e-2; #the second mutual friction parameter (alpha prime)

#initialisation, see setup_init() in configuration.c
init_mode = "random loops"; #the random loops will have centeres placed in the domain randomly
init_loops_n = 50; #number of random loops

#general simulation properties
frame_shots = 5; #saves a tangle to a file every frame_shots steps
dt = 5e-05; #seconds, (fixed) time step of the simulation, RK4 time stepping
dl_min = 0.001; #cm, minimum discretisation distance between points on a vortex
dl_max = 0.002; #cm, maxmim discretisation distance
#loops with fewer points than this will be removed
small_loop_cutoff = 5; #points

#reconnections setup
#reconnections happen only when several conditions are met
#see vortex_dynamics.c for details
reconnection_angle_cutoff = 5; #degrees, this is the smallest allowed angle
reconnection_distance = 0.002; #cm

#how many OpenMP threads to use
num_threads = 2

#injection of loops in the top plane of the domain
#used for counterflow boundary layer simulation
loop_injection = True;
loop_injection_frequency = 50.0;

#configuration of external velocity
#many options are available and it is easy to add more
#see external_velocity.h and external_velocity.c for details
#configuration of vn and vs is independent
#external vn and vs can be both space and time varying

#this setting creates the inhomogeneous counterflow with cosine
#modulation with average vns = 0.5 cm/s
vn_conf = { #normal fluid component configuration
	type = "cos-divfree";
	k = 188.5; #1/cm
	l = 0.1; #cm
	v0 = 0.1305; #cm/s
};
vs_conf = { #superfluid component configuration
	type = "cos-divfree";
	k = 188.5; #1/cm
	l = 0.1; #cm
	v0 = -0.3695; #cm/s
};

#for the special case of a single wall one can also have moving boundary, configured with
#vb_conf = {...}, see external_velocity.h and external_velocity.c
